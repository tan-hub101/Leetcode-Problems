/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 <--Fast Approach----->
 class Solution {
    int total;
    public int sumNumbers(TreeNode root) {
        total = 0;
        solve(root,0);
        return total;
    }
    void solve(TreeNode root, int currSum){
        if(root == null){
            return;
        }
        //leaf node
        if(root.left == null && root.right == null){
            currSum = currSum*10 + root.val;
            total += currSum;
            return;
        }
        int rootVal = currSum*10 + root.val;
        solve(root.left,rootVal);
        solve(root.right,rootVal);
    }
  }
  
<----Slow Approach---> 
class Solution {
    Integer sum = 0;
    //path = 0;
    //numbers append, path = 10*path+root.val;
    public int sumNumbers(TreeNode root) {
        if(root == null){
            return 0;
        }
        //dfs
        dfs(root,new StringBuilder(""));
        //adding all paths numbers found
        return sum;
    }
    void dfs(TreeNode root, StringBuilder str){
        //leaf node
        if(root.left == null && root.right == null){
            str.append(root.val);
            sum += Integer.parseInt(str.toString());
            return;
        }
        str.append(root.val);
        if(root.left != null){
            dfs(root.left,str);
            str.deleteCharAt(str.length()-1);
        }
        if(root.right != null){
           dfs(root.right,str);
           str.deleteCharAt(str.length()-1);
        }
    }
}
