static int row,col;
static int[][] matrix;

static int findMaxGold(){
	    int maxGold = Integer.MIN_VALUE;
	    int[][] dp = new int[row][col];
	    //-1
	    for(int i=0;i<row;i++){
	        for(int j=0;j<col;j++){
	            dp[i][j] = -1;
	        }
	    }
	   // for(int i=0;i<row;i++){
	   //     maxGold = Math.max(maxGold,findGold(i,0,dp));
	   // }
	   // return maxGold;
	   return findGold();
	}
	//Top-Down
	static int findGold(){
	    int[][] dp = new int[row][col];
	    Integer maxGold = Integer.MIN_VALUE;
	    if(col == 1){
	        for(int i=0;i<row;i++){
	            maxGold = Math.max(maxGold,matrix[i][0]);
	        }
	        return maxGold;
	    }
	    //More Columns
	    for(int i=0;i<row;i++){
	        dp[i][col-1] = matrix[i][col-1];
	    }
	    
	    for(int j=col-2;j>=0;j--){
	        for(int i=0;i<row;i++){
	            //single row
	            if(i-1 < 0 && i+1 == row){
	                dp[i][j] = matrix[i][j] + dp[i][j+1];
	            }
	            else if(i-1 < 0){
	               dp[i][j] = matrix[i][j] + Math.max(dp[i][j+1],dp[i+1][j+1]); 
	            }else if(i+1 == row){
	                dp[i][j] = matrix[i][j] + Math.max(dp[i-1][j+1],dp[i][j+1]); 
	            }else{
	                dp[i][j] = matrix[i][j] + Math.max(dp[i+1][j+1],Math.max(dp[i-1][j+1],dp[i][j+1]));
	            }
	            maxGold = Math.max(maxGold,dp[i][j]);
	        }
	    }
	    return maxGold;
	}
  
	//memoization
	static int findGold_mem(int currRow,int currCol,int[][] dp){

	    if(currRow < 0 || currRow >= row || currCol >= col){
	        return 0;
	    }
	    if(dp[currRow][currCol] != -1){
	        return dp[currRow][currCol];
	    }
	    dp[currRow][currCol] = matrix[currRow][currCol] + Math.max(findGold(currRow-1,currCol+1,dp),
	    		        Math.max(findGold(currRow,currCol+1,dp),
	                             findGold(currRow+1,currCol+1,dp)));
	                       
	   return dp[currRow][currCol];
	}
