static int row,col;
static int mod = (int)1e9 + 7;

static int findWaystoReachEnd(){
	   
	    long[][] dp = new long[row][col];
	    for(int i=0;i<row;i++){
	        for(int j=0;j<col;j++){
	            dp[i][j] = -1;
	        }
	    }
	    return (int) (find(0,0,dp) % mod);
	}
	static long find(int currRow, int currCol, long[][] dp){
	    if(currRow >= row || currCol >= col){
	        return 0;
	    }
	    if(currRow == row - 1 && currCol == col-1){
	        return 1;
	    }
	    if(dp[currRow][currCol] != -1){
	        return dp[currRow][currCol];
	    }
	    
	    dp[currRow][currCol] = find(currRow+1,currCol, dp) % mod
	                           + find(currRow,currCol+1, dp) % mod;
	                           
	    return dp[currRow][currCol];
	}
	static long find(int currRow, int currCol){
	    //Actually matrix ques
	    //each cell taken as it is
	    //reach row,col from 0,0
	    long[][] dp = new long[row][col];
	    for(int i = 0;i<row;i++){
	        dp[i][0] = 1;
	    }
	    for(int j=1;j<col;j++){
	        dp[0][j] = 1;
	    }
	    
	    for(int i = 1;i<row;i++){
	        for(int j=1;j<col;j++){
	            dp[i][j] = dp[i-1][j] % mod + dp[i][j-1] % mod;
	        }
	    }
	    return dp[row-1][col-1];
	}
