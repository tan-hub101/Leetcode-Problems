 public int countNodes(TreeNode root) {
        if(root == null){
            return 0;
        }
        int d = findTotalLevels(root,0);
        System.out.println(d);
        //level = 0, root
        if(d == 0){
            return 1;
        }
        //becuz we know range of no of nodes in last level - 1 - 2d
        //Binary search on ans
        int left = 1, right = (int)Math.pow(2,d)-1; //all above levels have 2d-1 nodes
        while(left <= right){
            int mid = left + (right-left)/2;
            if(nodeExists(mid,d,root)){
                left = mid+1;
            }else{
                right = mid-1;
            }
        }
        return (int)Math.pow(2,d)-1 + left;  
    }
    //Binry search to move left/right
    boolean nodeExists(int index,int d ,TreeNode root){
        int left = 0, right = (int)Math.pow(2,d)-1; //last levels have 2d nodes
        for(int i=0;i<d;i++){
            int pivot = left + (right-left)/2;
            if(index > pivot){
                root = root.right;
                left = pivot+1;
            }else{
                root = root.left;
                right = pivot-1;  
            }
        }
        return root != null;  
    }
    int findTotalLevels(TreeNode root, int level){
        if(root == null || (root.left == null && root.right == null)){
            return level;
        }
        return findTotalLevels(root.left,level+1);
    }
