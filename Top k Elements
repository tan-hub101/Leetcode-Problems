Map<Integer,Integer> map;
    int[] arr;
    
    //quick select
    public int[] topKFrequent(int[] nums, int k) {
        if(nums.length == 0){
            return new int[0];
        }
        
        int[] result = new int[k];
        int n = nums.length;
        map = new HashMap<>();
        for(int number : nums){
            map.put(number,map.getOrDefault(number,0)+1);
        }
        //to perform quick select
        arr = new int[map.size()];
        int i=0;
        for(int key : map.keySet()){
            arr[i] = key;
            i++;
        }
        int m = arr.length;
        quickSelect(0,m-1,m-k);
        
        return Arrays.copyOfRange(arr,m-k,m);
    }
    void quickSelect(int left, int right, int k_smallest){
        if(left == right){
            return;
        }
        Random random = new Random();
        int pivot_pos = left + random.nextInt(right-left);
        int pivot_final_pos = partition(left,right, pivot_pos);
        
        if(pivot_final_pos == k_smallest){
            return;
        }//move left
        else if(pivot_final_pos > k_smallest){
            quickSelect(left,pivot_final_pos - 1,k_smallest); 
        }
        else{
            quickSelect(pivot_final_pos+1,right,k_smallest);
        }
    }
    int partition(int left,int right, int pos){
        int pivot_freq = map.get(arr[pos]);
        swap(pos,right);
        int store_pivot = left;
        for (int i = left; i <= right; i++) {
            if (map.get(arr[i]) < pivot_freq) {
                swap(store_pivot, i);
                store_pivot++;
            }
        }
        swap(store_pivot,right);
        return store_pivot;
    }
    public void swap(int a, int b) {
        int tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }
    
    //Heap
//     public int[] topKFrequent(int[] nums, int k) {
//         int[] result = new int[k];
        
//         Map<Integer,Integer> map = new HashMap<>();
//         for(int number : nums){
//             map.put(number,map.getOrDefault(number,0)+1);
//         }
//         //min Heap
//         PriorityQueue<Integer> heap = new PriorityQueue<>((a,b) -> {
//                                         return map.get(a) > map.get(b) ? 1 : -1;
//                                        }
//                                       );
        
//         for(Integer key : map.keySet()){
//             heap.offer(key);
//             if(heap.size() > k){
//                 heap.poll();
//             }
//         }
//         int j = 0;
//         while(!heap.isEmpty()){
//             result[j] = heap.poll();
//             j++;
//         }
//         return result;
//     }
//     public int[] topKFrequent(int[] nums, int k) {
//         if(nums == null || nums.length == 0 || k == 0 || k > nums.length){
//             return new int[0];
//         }
//         List<Integer> res = new ArrayList<>();
        
//         Map<Integer,Integer> map = new HashMap<>();
//         for(int number : nums){
//             map.put(number,map.getOrDefault(number,0)+1);
//         }
//         List<Map.Entry<Integer,Integer>> entries = new ArrayList<>(map.entrySet());
        
//         Comparator<Map.Entry<Integer,Integer>> c = (Map.Entry<Integer,Integer>                                      entry1,Map.Entry<Integer,Integer> entry2) -> {
//                if(entry1.getValue().equals(entry2.getValue()))
//                    return 0;
//                return entry1.getValue() > entry2.getValue() ? -1 : 1;
//         };
        
//         Collections.sort(entries,c);
//         int idx = 0;
//         while(k > 0){
//             res.add(entries.get(idx).getKey());
//             k--;
//             idx++;
//         }
//         int[] result = new int[res.size()];
//         int j=0;
//         for(int m : res) {
//         	result[j] = m;
//             j++;
//         }
//         return result;
//     }
