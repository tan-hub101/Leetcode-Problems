/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int count = 0;
    int target;
    //prefix sum -> freq
    Map<Integer,Integer> map = new HashMap<>();
    
    public int pathSum(TreeNode root, int sum) {
        if(root == null){
            return 0;
        }
        target = sum;
        //if curr = 8, and target = 8, find if diff sum is seen in map
        //if yes, left over will sum upto target
        map.put(0,1);
        solve(root,0);
        return count;
    }
    void solve(TreeNode root, int currSum){
        if(root == null){
            return;
        }
        currSum += root.val;
        int diff = currSum - target;
        if(map.containsKey(diff)){
            count += map.get(diff);
        }
        map.put(currSum,map.getOrDefault(currSum,0)+1);
        solve(root.left,currSum);
        solve(root.right,currSum);
        //backtrack
        map.put(currSum,map.get(currSum)-1);
    }
}
