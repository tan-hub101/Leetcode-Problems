//Can be done through int[] arr = new int[26]

//Can be done through hashmap element -> index
    public int lengthOfLongestSubstring(String s) {
        
     if(s == null){
	      return 0;
	 }
	if(s.length() < 2){
		return s.length();
	}
	int maxLength = 0;
	int start = 0,end=0;
	int n = s.length();
    //Value -> index
	Map<Character,Integer> map = new HashMap<>();
	int currLen = 0;
	for(;end < n;end++){
		char ch = s.charAt(end);
		if(map.containsKey(ch)){
            //calclulate length till now
            maxLength = Math.max(maxLength , end-start);
            //next index of start in constant time
            start = Math.max(map.get(ch)+1,start);
        }
        map.put(ch,end);
	}
	maxLength = Math.max(maxLength , end-start);
	return maxLength;
    }
    
//set solution
public int lengthOfLongestSubstring(String s) {
        
        if(s == null || s.length() == 0){
            return 0;
        }
        if(s.length() == 1){
            return 1;
        }
        
        int n = s.length();
        int start = 0,end = 0;
        int maxLen = Integer.MIN_VALUE;
        Set<Character> set = new HashSet<>();
        set.add(s.charAt(0));
        
        for(end = 1;end < n;end++){
            char c = s.charAt(end);
            //duplicate
            while(!set.add(c)){
                maxLen = Math.max(maxLen,end-start);
                set.remove(s.charAt(start));
                start++;
            } 
        }
        return Math.max(maxLen,end-start);
    }
