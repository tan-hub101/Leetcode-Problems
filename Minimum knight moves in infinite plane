class Solution {
    
    public int minKnightMoves(int x, int y) {
	       //bfs
	       Queue<int[]> queue = new LinkedList<>();
	        //starting with source
	       queue.offer(new int[]{0,0});
	       int minSteps = 0;
	       Set<String> visited = new HashSet<>(); 
           visited.add("0,0");
	       int[][] directions = {{2,1},{2,-1},{-2,1},{-2,-1},{1,2},{-1,2},{-1,-2},{1,-2}};
        //checking only in 1 quadrant becuz of symmetry
	        x = Math.abs(x);
            y = Math.abs(y);
        
	        while(!queue.isEmpty()){
                int size = queue.size();
                for(int j=0;j<size;j++){
                    int[] point = queue.poll();
                    if(point[0] == x && point[1] == y) {
                        return minSteps;
                    }
                    for(int i=0;i<directions.length;i++) {
                        int currX = point[0] + directions[i][0];
                        int currY = point[1] + directions[i][1];
                        if(!visited.contains(currX+","+currY) && currX >= -1 && currY >= -1) {
                            queue.offer(new int[]{currX,currY});
                            visited.add(currX+","+currY);
                        }
                    }
                }
                minSteps++;
	        }
	       return -1; 
	    }
}
