 public int ladderLength(String beginWord, String endWord, List<String> wordList) {
		
		if(!wordList.contains(endWord)) {
			return 0;
		}
		
        int size = beginWord.length();
        //adjacency list for finding adjacent nodes for a word
        Map<String,List<String>> map = new HashMap<>();
        Map<String,Boolean> visited = new HashMap<>();
        
        for(String word : wordList) {
        	for(int i=0;i<size;i++) {
        		String newWord = word.substring(0, i) + '*' + word.substring(i + 1, size);
        		if(!map.containsKey(newWord)) {
        			map.put(newWord, new ArrayList<>());
        		}
        		map.get(newWord).add(word);
        	}
        }
        //BFS -> Shortest Path btwn 2 nodes
        Deque<Node> queue = new ArrayDeque<>();
        queue.offer(new Node(beginWord,1));
        while(!queue.isEmpty()) {
        	
        	Node currNode = queue.poll();
        	String currWord = currNode.word;
        	//finding adjacent words
        	for(int i=0;i<size;i++) {
        		String newWord = currWord.substring(0, i) + '*' + currWord.substring(i + 1, size);
        		if(map.containsKey(newWord)) {
        			List<String> adjWords = map.get(newWord);
        			int level = currNode.level;
        			for(String adjWord : adjWords) {
        				if(!visited.containsKey(adjWord)) {
        					if(adjWord.equals(endWord)) {
                                //checks level by level -> whenever found -> shortest
            					return level + 1;
            				}
            				queue.offer(new Node(adjWord,level+1));
            				visited.put(adjWord, true);
        				}
        			}
        			
        		}
        	}
        }
        return 0;
    }
	class Node{
		String word;
		int level;
		public Node(String word, int level) {
			super();
			this.word = word;
			this.level = level;
		}
		@Override
		public String toString() {
			return "Node [word=" + word + ", level=" + level + "]";
		}
	}
