class Solution{
    int[][] dp;
    public int minCut(String s){
        int n = s.length();
        dp = new int[n][n];
        for(int[] d:dp){
           Arrays.fill(d, -1); 
        }  
        //return partition(s,0,s.length()-1,dp);
        return partition_topDown(s,0,n-1);
    }
    //Memoized version -> Bottom up
    // int partition(String s, int start, int end,int[][] dp){
    //     if(start >= end){
    //         return 0;
    //     }
    //     if(dp[start][end] != -1){
    //         return dp[start][end];
    //     }
    //     if(isPalindrome(s,start,end)){
    //         dp[start][end] = 0;
    //         return 0;
    //     }
    //     int ans = Integer.MAX_VALUE;
    //     int n = s.length();
    //     for(int k=start;k<end;k++){
    //         int cut = partition(s,start,k,dp) + partition(s,k+1,end,dp);
    //         ans = Math.min(ans,cut+1);
    //     }
    //     dp[start][end] = ans;
    //     return dp[start][end];
    // }
    boolean isPalindrome(String s, int start, int end){
        while(start < end){
            if(s.charAt(start) != s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    //Top down
    int partition_topDown(String s, int start, int end){
        if(start >= end){
            return 0;
        }
        if(dp[start][end] != -1){
            return dp[start][end];
        }
        if(isPalindrome(s,start,end)){
            dp[start][end] = 0;
            return 0;
        }
        int ans = Integer.MAX_VALUE, left, right;
        for(int k=start;k<end;k++){
            if(dp[start][k] != -1){
                left = dp[start][k];
            }else{
                left = partition_topDown(s,start,k);
                dp[start][k] = left;
            }
            if(dp[k+1][end] != -1){
                right = dp[k+1][end];
            }else{
                right = partition_topDown(s,k+1,end);
                dp[k+1][end] = right;
            }
            if(ans > left + right + 1){
                ans = left + right + 1;
            }
        }
        dp[start][end] = ans;
        return ans;
    }
}
