class Solution {
    Set<String> set = new HashSet<>();
    
    public boolean wordBreak(String s, List<String> wordDict) {
        //exploring all combinations

        for(String str : wordDict){
            set.add(str);
        }
    
        Map<String,Boolean> map = new HashMap<>(); 
        return solve(s);
    }
    //DP
    boolean solve(String s){
        int n = s.length();
        boolean[] dp = new boolean[n+1];
        dp[0] = true;
        for(int i =1;i<n+1;i++){
            for(int j = 0;j<i;j++){
               if(dp[j] && set.contains(s.substring(j,i))){
                   dp[i] = true;
                   break;
               } 
            } 
        }
        return dp[n];
    }
    
    //Memoized Code
//     boolean solve(String s,Map<String,Boolean> map){
        
//         //Base condition
//         if(s.equals("")){
//             return true;
//         }
//         if(map.containsKey(s)){
//             return map.get(s);
//         }
        
//         for(int i = 1;i<=s.length();i++){
//             if(set.contains(word) && solve(s.substring(i,s.length()), map)){
//                 map.put(s.substring(i,s.length()),true);
//                 return true;
//             } 
//         }
//         map.put(s , false);
//         return false;
//     }
    
    //Recursive
//     boolean solve(String s){
        
//         //Base condition
//         if(s.equals("")){
//             return true;
//         }
        
//         for(int i = 1;i<s.length();i++){
//             String word = s.substring(0,i);
//             if(set.contains(word) && solve(s.substring(i,s.length()))){
//                     return true;
//             }
//         }
//         return false;
//     }

}
