static int findJumps_recursive(int target){
	    
	    if(target == 0){
	        return 1;
	    }
	    if(target < 0){
	        return 0;
	    }
	    return findJumps(target-1) + findJumps(target-2) + findJumps(target-3);
	}

//Top-Bottom (Memoized)
static int findJumps(int target,int[] dp){

    if(target == 0){
        return 1;
    }
    if(target < 0){
        return 0;
    }
    if(dp[target] != -1){
        return dp[target];
    }

    dp[target] = findJumps(target-1,dp) + findJumps(target-2,dp) + findJumps(target-3,dp);

    return dp[target];
 	}
  
//Bottom-Top(DP)
static int findJumps(int target){
  if(target == 0 || target == 1) {
    return 1;
  }
  int[] dp = new int[target+1];
  dp[0] = 1;
  dp[1] = dp[0];
  dp[2] = dp[0] + dp[1];
   for(int i=3;i<dp.length;i++) {
     dp[i] = dp[i-1] + dp[i-2] + dp[i-3];
   }

  return dp[target];
}
