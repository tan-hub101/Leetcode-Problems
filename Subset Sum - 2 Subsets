class Solution {
    //DP
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        if(nums == null || n == 0 || n < 2){
            return false;
        }
        int sum = 0;
        
        for(int i : nums){
            sum += i;
        }
        if(sum % 2 != 0){
            return false;
        }
        sum = sum/2;
        boolean[][] dp = new boolean[n+1][sum+1];
        
        return find(nums,n,sum,dp);
    }
    //Top Down
    boolean find(int[] nums,int n,int sum,boolean[][] dp){
        
        for(int i =0;i<n+1;i++){
            dp[i][0] = true;
        }
        for(int j=1;j<sum+1;j++){
            dp[0][j] = false;
        }
        for(int i = 1;i<n+1;i++){
            for(int j =1;j<sum+1;j++){
                if(nums[i-1] <= j){
                   dp[i][j] = dp[i-1][j-nums[i-1]] || dp[i-1][j];  
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }   
        return dp[n][sum];
    }
}
