public List<Integer> postorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<>();
		traversePostOrder_iterative(root,list);
		return list;
}
    
    void traversePostOrder_iterative(TreeNode root, List<Integer> list) {
        if(root == null){
            return;
        }
		 Stack<TreeNode> stack = new Stack<>();
     Stack<TreeNode> stack1 = new Stack<>();
     stack.push(root);
        
		while(!stack.isEmpty()) {
			TreeNode p = stack.pop();
            stack1.push(p);
                if(p.left != null){
                  stack.push(p.left);
                }
                if(p.right != null){
                 stack.push(p.right);
                }
	    }
        while(!stack1.isEmpty()){
            list.add(stack1.pop().val);
        }
        
	 }
