//binary Search
    public int kthSmallest(int[][] matrix, int k) {
        
        if(matrix == null || matrix.length == 0){
            return -1;
        }
        
        int n = matrix.length;
        int m = matrix[0].length;
        if(k == 1){
            return matrix[0][0];
        }
        if(k == n*m){
            return matrix[n-1][m-1];
        }
        
        int low = matrix[0][0];
        int high = matrix[n-1][m-1];
        int ans = -1;
        while(low <= high){
            int mid = low + (high-low)/2;
            int count = countValuesLessOrEqual(matrix, mid, n, m);
            if(count < k){
                low = mid+1;
            }else{
                ans = mid;
                high = mid - 1;
            }
        }
        return ans;
    }
    
    public int countValuesLessOrEqual(int[][] matrix, int value, int n, int m){
        //starting with bottom left
        //can take both decisions -> increase/decrease
        int i = n-1;
        int j = 0;
        int count = 0;
        
        while(i >= 0 && j < m){
            if(matrix[i][j] > value){
                i--;
            }else{
                count += i+1;
                j++;
            }
        }
        return count;
    }
    
    //does not use sorted row/col
    // public int kthSmallest(int[][] matrix, int k) {
    //     PriorityQueue<Integer> heap = new PriorityQueue<>(Collections.reverseOrder());
    //     for(int i=0;i<matrix.length;i++){
    //         for(int j=0;j<matrix[0].length;j++){
    //             heap.offer(matrix[i][j]);
    //             if(heap.size() > k){
    //                 heap.poll();
    //             }
    //         }
    //     }
    //     return heap.poll();
    // }
