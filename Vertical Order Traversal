class Solution {
    List<List<Integer>> result = new ArrayList<>();
    Map<Integer,List<Node>> map = new TreeMap<>();
    
    public List<List<Integer>> verticalTraversal(TreeNode root){
        if(root == null){
            return result;
        }
        if(root.left == null && root.right == null){
            result.add(Arrays.asList(root.val));
            return result;
        }
        solve(root);
        List<Node> nodeList = new ArrayList<>();
        for(Entry<Integer,List<Node>> m : map.entrySet()){
            List<Integer> list = new ArrayList<>();
            nodeList = m.getValue();
            Collections.sort(nodeList,(a,b)->a.y == b.y ? a.node.val - b.node.val : 0);
            for(int i=0;i<nodeList.size();i++){
            	list.add(nodeList.get(i).node.val); 
            }
            result.add(list);
        }
        return result;
    }
    void solve(TreeNode root){
        if(root == null){
            return;
        }
        Queue<Node> queue = new LinkedList<>();
        queue.offer(new Node(root,0,0));
        while(!queue.isEmpty()){
                Node parent = queue.poll();
                if(map.containsKey(parent.x)){
                    map.get(parent.x).add(parent);
                }else{
                    List<Node> list = new ArrayList<>();
                    list.add(parent);
                    map.put(parent.x,list);
                }
                if(parent.node.left != null){
                        queue.offer(new Node(parent.node.left,parent.x - 1,parent.y - 1));  
                }
                if(parent.node.right != null){
                    queue.offer(new Node(parent.node.right,parent.x + 1,parent.y - 1));
                }
            }
        }
    
    class Node{
        TreeNode node;
        int x,y;
        public Node(TreeNode node, int x,int y){
            this.node = node;
            this.x = x;
            this.y = y;
        }
    }
}
