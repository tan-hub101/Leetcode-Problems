class Solution {
    int maxArea = Integer.MIN_VALUE;
    int n;
    // public int largestRectangleArea(int[] heights) {
    //     int n = heights.length;
    //     int maxArea = Integer.MIN_VALUE;
    //     //for every bar -> calculate area and update max
    //     for(int i=0;i<n;i++){
    //         int left = i, right = i;
    //         int area = 0;
    //         while(left-1 >= 0 && heights[left-1] >= heights[i]){
    //             left--;
    //         }
    //         while(right+1 < n && heights[right+1] >= heights[i]){
    //             right++;
    //         }
    //         area = heights[i]*(right-left+1);
    //         maxArea = Math.max(maxArea,area);
    //     }
    //     return maxArea;
    // }
    //Stack solution as j = fn(i)
    public int largestRectangleArea(int[] heights){
        if(heights == null || heights.length == 0){
            return 0;
        }
        n = heights.length;
        //Indices of Nearest smaller to left
        int[] left = findNSL(heights);
        //Indices of Nearest smaller to right
        int[] right = findNSR(heights); 
        //width[] = right - left-1
        int[] width = new int[n];
        for(int k=0;k<n;k++){
            width[k] = right[k]-left[k]-1;
        }
        //maxArea = width[i]*heights[i]
        for(int i=0;i<n;i++){
            maxArea = Math.max(maxArea,width[i]*heights[i]);
        }
        return maxArea;
    }
    int[] findNSL(int[] heights){
        int[] result = new int[n];
        Deque<Pair> stack = new ArrayDeque<Pair>(); 
        for(int i=0;i<n;i++){
            if(stack.isEmpty()){
                result[i] = -1;
            }else{
                if(stack.peek().value < heights[i]){
                    result[i] = stack.peek().index;
                }else{
                    while(!stack.isEmpty() && stack.peek().value >= heights[i]){
                        stack.pop();
                    }
                    if(stack.isEmpty()){
                        result[i] = -1;
                    }else{
                        result[i] = stack.peek().index;
                    }
                }  
            }
            stack.push(new Pair(heights[i],i));
        }
        return result;
    }
     int[] findNSR(int[] heights){
        int[] result = new int[n];
        Deque<Pair> stack = new ArrayDeque<Pair>(); 
        for(int i=n-1;i>=0;i--){
            if(stack.isEmpty()){
                result[i] = n;
            }else{
                if(stack.peek().value < heights[i]){
                    result[i] = stack.peek().index;
                }else{
                    while(!stack.isEmpty() && stack.peek().value >= heights[i]){
                        stack.pop();
                    }
                    if(stack.isEmpty()){
                        result[i] = n;
                    }else{
                        result[i] = stack.peek().index;
                    }
                }  
            }
            stack.push(new Pair(heights[i],i));
        }
        return result;
    }
    class Pair{
        int value,index;
        public Pair(int value, int index){
            this.value = value;
            this.index = index;
        }
    }
}
