class Solution {
    public int[][] merge(int[][] intervals) {
        LinkedList<int[]> merged = new LinkedList<>();
        if(intervals.length == 0){
            return merged.toArray(new int[merged.size()][]);
        }
        Arrays.sort(intervals,(a,b) -> a[0]-b[0]);
        
        merged.add(intervals[0]);
       
        
        for(int i=1;i<intervals.length;i++){
            int currStart = intervals[i][0];
            int currEnd = intervals[i][1];
            //overlapping
            if(currStart >= merged.getLast()[0] && currStart <= merged.getLast()[1]) {
            	merged.getLast()[0] = Math.min(merged.getLast()[0],currStart);
            	merged.getLast()[1] = Math.max(merged.getLast()[1],currEnd);
            }
            else {
            	merged.add(intervals[i]);
            }  
        }
        return merged.toArray(new int[merged.size()][]);
    }
}
